crystal_doc_search_index_callback({"repository_name":"coral","body":"# coral\n\nTODO: Write a description here\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     coral:\n       github: your-github-user/coral\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"coral\"\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/coral/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [your-name-here](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"coral/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"coral","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MESSAGES","name":"MESSAGES","value":"{Status::Ok => \"OK\", Status::BadRequest => \"Bad Request\", Status::NotFound => \"Not Found\", Status::NotAllowed => \"Method Not Allowed\"}","doc":"Message for each HTTP code in `Status`.\n\nTODO: add more codes to `Status` and to this hash.","summary":"<p>Message for each HTTP code in <code><a href=\"Status.html\">Status</a></code>.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"coral/Coral","path":"Coral.html","kind":"module","full_name":"Coral","name":"Coral","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The server module. Defines a server class, which interfaces with all other classes to provide the actual server.","summary":"<p>The server module.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"coral/Coral/BodyParser","path":"Coral/BodyParser.html","kind":"class","full_name":"Coral::BodyParser","name":"BodyParser","abstract":false,"superclass":{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"coral/Coral/JSONBodyParser","kind":"class","full_name":"Coral::JSONBodyParser","name":"JSONBodyParser"},{"html_id":"coral/Coral/URLBodyParser","kind":"class","full_name":"Coral::URLBodyParser","name":"URLBodyParser"}],"including_types":[],"namespace":{"html_id":"coral/Coral","kind":"module","full_name":"Coral","name":"Coral"},"doc":"Base class for all body parsers. Not meant to have a constructor; a good body parser should only expose the \n`#self.parse` method. Even this method is not meant to be called directly; it should be bound in the server\nto a specific MIME type, and then it can be parsed automatically.","summary":"<p>Base class for all body parsers.</p>","class_methods":[{"id":"parse(body:String)-class-method","html_id":"parse(body:String)-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(body : String)","source_link":null,"def":{"name":"parse","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(NotImplementedError.new)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"coral/Coral/JSONBodyParser","path":"Coral/JSONBodyParser.html","kind":"class","full_name":"Coral::JSONBodyParser","name":"JSONBodyParser","abstract":false,"superclass":{"html_id":"coral/Coral/BodyParser","kind":"class","full_name":"Coral::BodyParser","name":"BodyParser"},"ancestors":[{"html_id":"coral/Coral/BodyParser","kind":"class","full_name":"Coral::BodyParser","name":"BodyParser"},{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"coral/Coral","kind":"module","full_name":"Coral","name":"Coral"},"doc":"Body parser for JSON requests. Simply invokes `JSON#parse`, and returns a `JSON::Any` object.","summary":"<p>Body parser for JSON requests.</p>","class_methods":[{"id":"parse(body:String)-class-method","html_id":"parse(body:String)-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(body : String)","source_link":null,"def":{"name":"parse","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"JSON.parse(body)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"coral/Coral/MultipartFile","path":"Coral/MultipartFile.html","kind":"class","full_name":"Coral::MultipartFile","name":"MultipartFile","abstract":false,"superclass":{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"coral/Coral","kind":"module","full_name":"Coral","name":"Coral"},"doc":"Represents a file in a multipart request. Stores filename, body, and, if given, the MIME type\nof a file.","summary":"<p>Represents a file in a multipart request.</p>","class_methods":[],"constructors":[{"id":"new(filename:String,body:String,type:String?)-class-method","html_id":"new(filename:String,body:String,type:String?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String | ::Nil"}],"args_string":"(filename : String, body : String, type : String?)","source_link":null,"def":{"name":"new","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(filename, body, type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"body:String-instance-method","html_id":"body:String-instance-method","name":"body","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@body"}},{"id":"filename:String-instance-method","html_id":"filename:String-instance-method","name":"filename","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"filename","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@filename"}},{"id":"type:String?-instance-method","html_id":"type:String?-instance-method","name":"type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@type"}}],"macros":[],"types":[]},{"html_id":"coral/Coral/Request","path":"Coral/Request.html","kind":"class","full_name":"Coral::Request","name":"Request","abstract":false,"superclass":{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"coral/Coral","kind":"module","full_name":"Coral","name":"Coral"},"doc":"Base request class. Passed as a parameter to all handlers; should not be created manually. It defines several\nproperties for convenience, and also several class methods used in the creation of requests.","summary":"<p>Base request class.</p>","class_methods":[{"id":"from(body:String)-class-method","html_id":"from(body:String)-class-method","name":"from","doc":"Given the raw string body of an HTTP request, creates a request. Uses simple regex to parse the HTTP version number,\nheaders, and body. This method can be called manually, but usually is handled by the server.\nExample:\n```\nCoral::Request.from \"GET / HTTP/1.1\\nHost: http://example.com\\n\" # => <Request>\n```\nLike `#parse_cookies` and `#parse_multipart`, this method assumes validity of input, and so you should take care\nwhen calling it yourself.\n\nNOTE: this method uses \"\\n\" as a seperator, rather than the default \"\\r\\n\". This is because the server passes it\ninput in that format, rather than the default. If calling manually, keep this in mind.","summary":"<p>Given the raw string body of an HTTP request, creates a request.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(body : String)","source_link":null,"def":{"name":"from","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"body = body.split(\"\\n\")\nif (/^[A-Z]+ *(\\/[\\w?&=.]*)+ *HTTP\\/[10]\\.\\d$/) =~ (top = body[0])\nelse\n  return Status::BadRequest\nend\nbody = body[1..]\nmethod, path, _ = top.split(' ')\nheaders = HeaderMap.new\nwhile (/^[A-z-]+ *: *.+$/) =~ (line = body[0])\n  body = body[1..]\n  header, value = (line.sub(' ', \"\")).split(\":\")\n  headers[header] = value\nend\nRequest.new(method, path, headers, body.join(\"\\n\"))\n"}},{"id":"parse_cookies(header:String)-class-method","html_id":"parse_cookies(header:String)-class-method","name":"parse_cookies","doc":"Parses a `Cookie` header into a `Hash(String, String)` representing all passed cookies. Works by splitting\nthe header on \";\" characters, then splitting those on \"=\" characters to generate key value pairs. Mainly used\nfor parsing cookies when a request object is created, but can be invoked manually.\nExample:\n```\nCoral::Request.parse_cookies \"a=b;c=d\" # { \"a\" => \"b\", \"c\" => \"d\" }\n```\n\nNOTE: this function assumes any passed input is valid, and will throw an exception if it is not. If you are\ncalling it manually, be sure to validate input first.","summary":"<p>Parses a <code>Cookie</code> header into a <code>Hash(String, String)</code> representing all passed cookies.</p>","abstract":false,"args":[{"name":"header","doc":null,"default_value":"","external_name":"header","restriction":"String"}],"args_string":"(header : String)","source_link":null,"def":{"name":"parse_cookies","args":[{"name":"header","doc":null,"default_value":"","external_name":"header","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"c = CookieMap.new\n(header.split(\";\")).each do |cookie|\n  if cookie.size > 0\n    k, v = cookie.split(\"=\")\n    c[k] = v\n  end\nend\nc\n"}},{"id":"parse_multipart(data:String,boundary:String)-class-method","html_id":"parse_multipart(data:String,boundary:String)-class-method","name":"parse_multipart","doc":"Parses a mutlipart form body (ie., MIME type `multipart/form-data`) into a `Hash(String, Coral::MultipartFile)`\nmapping the name fields of inputs to `Coral::MultipartFile` objects. This as well is used mainly in creating\na request, but it can also be called manually. Takes as input the multipart data, and its boundary string.\nLike #parse_cookies, it assumes the input is valid, so be sure to validate it yourself if you call this manually.\n\nTODO: since this is mainly used for body parsing, it could potentially be migrated to a subclass of\n`Coral::BodyParser`.","summary":"<p>Parses a mutlipart form body (ie., MIME type <code>multipart/form-data</code>) into a <code>Hash(String, <a href=\"../Coral/MultipartFile.html\">Coral::MultipartFile</a>)</code> mapping the name fields of inputs to <code><a href=\"../Coral/MultipartFile.html\">Coral::MultipartFile</a></code> objects.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"},{"name":"boundary","doc":null,"default_value":"","external_name":"boundary","restriction":"String"}],"args_string":"(data : String, boundary : String)","source_link":null,"def":{"name":"parse_multipart","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"},{"name":"boundary","doc":null,"default_value":"","external_name":"boundary","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"files = FileMap.new\n((data.as(String)).split(boundary))[1..].each do |item|\n  if (item != \"\") && (item != \"--\\r\\n\")\n    headers = (item.split(\"\\r\\n\"))[..3]\n    headers = headers[1..]\n    body = item[((headers.map(&.size)).sum + 8)..][..-2]\n    if (headers[0].includes?(\"filename\")) && (headers[0].includes?(\"name\"))\n      filename = ((/filename *= *\"([^\"]*)\"/).match(headers[0])).try(&.[](1))\n      name = ((/name *= *\"([^\"]*)\"/).match(headers[0])).try(&.[](1))\n      type = nil\n      if headers.size == 2\n        type = (headers[1].split(' '))[1]\n      end\n      files[name.as(String)] = MultipartFile.new(filename.as(String), body[..-4], type)\n    end\n  end\nend\nfiles\n"}}],"constructors":[{"id":"new(method:String,path:String,headers:HeaderMap,body:BodyType)-class-method","html_id":"new(method:String,path:String,headers:HeaderMap,body:BodyType)-class-method","name":"new","doc":"Creates a new request. Should never be called manually.","summary":"<p>Creates a new request.</p>","abstract":false,"args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"String"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"","external_name":"headers","restriction":"HeaderMap"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"BodyType"}],"args_string":"(method : String, path : String, headers : HeaderMap, body : BodyType)","source_link":null,"def":{"name":"new","args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"String"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"headers","doc":null,"default_value":"","external_name":"headers","restriction":"HeaderMap"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"BodyType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(method, path, headers, body)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"body:Hash(String,String)|JSON::Any|String|Nil-instance-method","html_id":"body:Hash(String,String)|JSON::Any|String|Nil-instance-method","name":"body","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, String) | JSON::Any | String | Nil","source_link":null,"def":{"name":"body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@body"}},{"id":"body=(body)-instance-method","html_id":"body=(body)-instance-method","name":"body=","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""}],"args_string":"(body)","source_link":null,"def":{"name":"body=","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@body = body"}},{"id":"cookies:CookieMap-instance-method","html_id":"cookies:CookieMap-instance-method","name":"cookies","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : CookieMap","source_link":null,"def":{"name":"cookies","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CookieMap","visibility":"Public","body":"@cookies"}},{"id":"files:FileMap-instance-method","html_id":"files:FileMap-instance-method","name":"files","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : FileMap","source_link":null,"def":{"name":"files","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"FileMap","visibility":"Public","body":"@files"}},{"id":"headers:HeaderMap-instance-method","html_id":"headers:HeaderMap-instance-method","name":"headers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HeaderMap","source_link":null,"def":{"name":"headers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HeaderMap","visibility":"Public","body":"@headers"}},{"id":"method:String-instance-method","html_id":"method:String-instance-method","name":"method","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"method","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@method"}},{"id":"path:String-instance-method","html_id":"path:String-instance-method","name":"path","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@path"}}],"macros":[],"types":[]},{"html_id":"coral/Coral/Response","path":"Coral/Response.html","kind":"class","full_name":"Coral::Response","name":"Response","abstract":false,"superclass":{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULTHEADERS","name":"DEFAULTHEADERS","value":"{\"Content-Type\" => \"text/plain\"}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"coral/Coral","kind":"module","full_name":"Coral","name":"Coral"},"doc":"Represents a response. Unlike `Request`, this class is meant to be constructed manually, and should be returned from\nevery handler.","summary":"<p>Represents a response.</p>","class_methods":[{"id":"css(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"css(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"css","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(body : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"css","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new(body, status, headers)\nres.headers[\"Content-Type\"] = \"text/css\"\nres\n"}},{"id":"css_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"css_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"css_file","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(filename : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"css_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new((File.read(filename)), status, headers)\nres.headers[\"Content-Type\"] = \"text/css\"\nres\n"}},{"id":"encode_cookies(cookies:CookieMap)-class-method","html_id":"encode_cookies(cookies:CookieMap)-class-method","name":"encode_cookies","doc":"Encodes a `Hash(String, String)` representing cookies to a string suitable for use with the Set-Cookie header.\nBasically the inverse of `Request.parse_cookies`. Although mostly used in encoding responses, it too can be\ncalled manually.\nExample:\n```\nCoral::Response.encode_cookies { \"a\" => \"b\", \"c\" => \"d\" } # a=b;c=d\n```","summary":"<p>Encodes a <code>Hash(String, String)</code> representing cookies to a string suitable for use with the Set-Cookie header.</p>","abstract":false,"args":[{"name":"cookies","doc":null,"default_value":"","external_name":"cookies","restriction":"CookieMap"}],"args_string":"(cookies : CookieMap)","source_link":null,"def":{"name":"encode_cookies","args":[{"name":"cookies","doc":null,"default_value":"","external_name":"cookies","restriction":"CookieMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"c = \"\"\ncookies.each do |k, v|\n  c = c + \"#{k}=#{v};\"\nend\nc.rstrip(';')\n"}},{"id":"html(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"html(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"html","doc":"Create MIME methods for text/html, text/css, text/plain, application/javascript, and application/json.\nNOTE: application/javascript is used rather than text/javascript because it is more modern.","summary":"<p>Create MIME methods for text/html, text/css, text/plain, application/javascript, and application/json.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(body : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"html","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new(body, status, headers)\nres.headers[\"Content-Type\"] = \"text/html\"\nres\n"}},{"id":"html_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"html_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"html_file","doc":"Create MIME methods for text/html, text/css, text/plain, application/javascript, and application/json.\nNOTE: application/javascript is used rather than text/javascript because it is more modern.","summary":"<p>Create MIME methods for text/html, text/css, text/plain, application/javascript, and application/json.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(filename : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"html_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new((File.read(filename)), status, headers)\nres.headers[\"Content-Type\"] = \"text/html\"\nres\n"}},{"id":"javascript(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"javascript(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"javascript","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(body : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"javascript","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new(body, status, headers)\nres.headers[\"Content-Type\"] = \"application/javascript\"\nres\n"}},{"id":"javascript_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"javascript_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"javascript_file","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(filename : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"javascript_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new((File.read(filename)), status, headers)\nres.headers[\"Content-Type\"] = \"application/javascript\"\nres\n"}},{"id":"json(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"json(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"json","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(body : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"json","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new(body, status, headers)\nres.headers[\"Content-Type\"] = \"application/json\"\nres\n"}},{"id":"json_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"json_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"json_file","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(filename : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"json_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new((File.read(filename)), status, headers)\nres.headers[\"Content-Type\"] = \"application/json\"\nres\n"}},{"id":"plain(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"plain(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"plain","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(body : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"plain","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new(body, status, headers)\nres.headers[\"Content-Type\"] = \"text/plain\"\nres\n"}},{"id":"plain_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","html_id":"plain_file(filename:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS)-class-method","name":"plain_file","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(filename : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>)","source_link":null,"def":{"name":"plain_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = Response.new((File.read(filename)), status, headers)\nres.headers[\"Content-Type\"] = \"text/plain\"\nres\n"}}],"constructors":[{"id":"new(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS,cookies:CookieMap=CookieMap.new)-class-method","html_id":"new(body:String,status:Status=Status::Ok,headers:HeaderMap=DEFAULTHEADERS,cookies:CookieMap=CookieMap.new)-class-method","name":"new","doc":"Creates a new response. Should be called manually. Can take many arguments:\n  - `body`, the response body.\n  - `status`, the status code - should be a member of `Status`.\n  - `headers`, the response headers.\n  - `cookies`, the cookies to set in the client.\nExample:\n```\nCoral::Response.new \"body\", Status::Ok, { \"Host\" => \"example.com\" } # => <Response>\n```\n\nNOTE: while this method can be called manually, and is perfectly suitable for use, it is\nmore common to use the associated methods for MIME types.","summary":"<p>Creates a new response.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"},{"name":"cookies","doc":null,"default_value":"CookieMap.new","external_name":"cookies","restriction":"CookieMap"}],"args_string":"(body : String, status : Status = <span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">Ok</span>, headers : HeaderMap = <span class=\"t\">DEFAULTHEADERS</span>, cookies : CookieMap = <span class=\"t\">CookieMap</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"new","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"Status::Ok","external_name":"status","restriction":"Status"},{"name":"headers","doc":null,"default_value":"DEFAULTHEADERS","external_name":"headers","restriction":"HeaderMap"},{"name":"cookies","doc":null,"default_value":"CookieMap.new","external_name":"cookies","restriction":"CookieMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(body, status, headers, cookies)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"body:String-instance-method","html_id":"body:String-instance-method","name":"body","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@body"}},{"id":"cookies:CookieMap-instance-method","html_id":"cookies:CookieMap-instance-method","name":"cookies","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : CookieMap","source_link":null,"def":{"name":"cookies","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CookieMap","visibility":"Public","body":"@cookies"}},{"id":"cookies=(cookies:CookieMap)-instance-method","html_id":"cookies=(cookies:CookieMap)-instance-method","name":"cookies=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cookies","doc":null,"default_value":"","external_name":"cookies","restriction":"CookieMap"}],"args_string":"(cookies : CookieMap)","source_link":null,"def":{"name":"cookies=","args":[{"name":"cookies","doc":null,"default_value":"","external_name":"cookies","restriction":"CookieMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cookies = cookies"}},{"id":"headers:HeaderMap-instance-method","html_id":"headers:HeaderMap-instance-method","name":"headers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HeaderMap","source_link":null,"def":{"name":"headers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HeaderMap","visibility":"Public","body":"@headers"}},{"id":"headers=(headers:HeaderMap)-instance-method","html_id":"headers=(headers:HeaderMap)-instance-method","name":"headers=","doc":null,"summary":null,"abstract":false,"args":[{"name":"headers","doc":null,"default_value":"","external_name":"headers","restriction":"HeaderMap"}],"args_string":"(headers : HeaderMap)","source_link":null,"def":{"name":"headers=","args":[{"name":"headers","doc":null,"default_value":"","external_name":"headers","restriction":"HeaderMap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@headers = headers"}},{"id":"status:Status-instance-method","html_id":"status:Status-instance-method","name":"status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Status","source_link":null,"def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Status","visibility":"Public","body":"@status"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Converts a response to a raw HTTP response string. Should not be called manually; invoked only in the server.","summary":"<p>Converts a response to a raw HTTP response string.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@headers[\"Set-Cookie\"] = Response.encode_cookies(@cookies)\ns = \"HTTP/1.0 #{@status.value}\\r\\n\"\n@headers.each do |header, value|\n  s = s + \"#{header}: #{value}\\r\\n\"\nend\ns + \"\\r\\n#{@body}\"\n"}}],"macros":[{"id":"mime_constructor(category,mime)-macro","html_id":"mime_constructor(category,mime)-macro","name":"mime_constructor","doc":"Creates methods for generating a response of a given MIME type. Given a category (eg., application)\nand a name (eg., json), it generates two methods: self.{{ name }}, which given a string, will set the\nContent-Type header to the given MIME type and the body to that string, and self.{{ name }}_file, which\nbehaves like self.{{ name }}, but which treats the string as filename and reads it instead of setting\nthe body to it.","summary":"<p>Creates methods for generating a response of a given MIME type.</p>","abstract":false,"args":[{"name":"category","doc":null,"default_value":"","external_name":"category","restriction":""},{"name":"mime","doc":null,"default_value":"","external_name":"mime","restriction":""}],"args_string":"(category, mime)","source_link":null,"def":{"name":"mime_constructor","args":[{"name":"category","doc":null,"default_value":"","external_name":"category","restriction":""},{"name":"mime","doc":null,"default_value":"","external_name":"mime","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"            def self.\n{{ mime }}\n(body : String, status : Status = Status::Ok, headers : HeaderMap = DEFAULTHEADERS)\n                res = Response.new body, status, headers\n                res.headers[\"Content-Type\"] = \"\n{{ category }}\n/\n{{ mime }}\n\"\n                res\n            \nend\n            \n            def self.\n{{ mime }}\n_file(filename : String, status : Status = Status::Ok, headers : HeaderMap = DEFAULTHEADERS)\n                res = Response.new (File.read filename), status, headers\n                res.headers[\"Content-Type\"] = \"\n{{ category }}\n/\n{{ mime }}\n\"\n                res\n            \nend\n        \n"}}],"types":[]},{"html_id":"coral/Coral/Server","path":"Coral/Server.html","kind":"class","full_name":"Coral::Server","name":"Server","abstract":false,"superclass":{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"coral/Coral","kind":"module","full_name":"Coral","name":"Coral"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(port:Int32,cap:Int32=32)-class-method","html_id":"new(port:Int32,cap:Int32=32)-class-method","name":"new","doc":"Creates a server. This is meant to be called manually. Unlike response, there are no alternate constructors. It\ntakes two parameters: the port and optionally capacity. Capacity is the size of the channel for requests - a\nsmall value will cause blocking if too many requests occur at once. The default is 32.\nExample:\n```\nCoral::Server.new 3000 # => <Server>\n```","summary":"<p>Creates a server.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"},{"name":"cap","doc":null,"default_value":"32","external_name":"cap","restriction":"Int32"}],"args_string":"(port : Int32, cap : Int32 = <span class=\"n\">32</span>)","source_link":null,"def":{"name":"new","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"Int32"},{"name":"cap","doc":null,"default_value":"32","external_name":"cap","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(port, cap)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"delete(path:String,&handler:Proc(Request,Response))-instance-method","html_id":"delete(path:String,&handler:Proc(Request,Response))-instance-method","name":"delete","doc":"Creates handlers for requests with the \"delete\" method. Given a path and a block or proc,\nassociates a delete request to that path with the given block or proc.\nExample:\n```\nserver.delete \"/\" do |req|\n  ...\nend\n```","summary":"<p>Creates handlers for requests with the \"delete\" method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, &handler : Proc(Request, Response))","source_link":null,"def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"Proc(Request, Response)"},"return_type":"","visibility":"Public","body":"@handlers = {\"delete\".upcase => Hash(String, Proc(Request, Response)).new}.merge(@handlers)\n@handlers[\"delete\".upcase][path] = handler\n"}},{"id":"get(path:String,&handler:Proc(Request,Response))-instance-method","html_id":"get(path:String,&handler:Proc(Request,Response))-instance-method","name":"get","doc":"Creates handlers for requests with the \"get\" method. Given a path and a block or proc,\nassociates a get request to that path with the given block or proc.\nExample:\n```\nserver.get \"/\" do |req|\n  ...\nend\n```","summary":"<p>Creates handlers for requests with the \"get\" method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, &handler : Proc(Request, Response))","source_link":null,"def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"Proc(Request, Response)"},"return_type":"","visibility":"Public","body":"@handlers = {\"get\".upcase => Hash(String, Proc(Request, Response)).new}.merge(@handlers)\n@handlers[\"get\".upcase][path] = handler\n"}},{"id":"head(path:String,&handler:Proc(Request,Response))-instance-method","html_id":"head(path:String,&handler:Proc(Request,Response))-instance-method","name":"head","doc":"Creates handlers for requests with the \"head\" method. Given a path and a block or proc,\nassociates a head request to that path with the given block or proc.\nExample:\n```\nserver.head \"/\" do |req|\n  ...\nend\n```","summary":"<p>Creates handlers for requests with the \"head\" method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, &handler : Proc(Request, Response))","source_link":null,"def":{"name":"head","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"Proc(Request, Response)"},"return_type":"","visibility":"Public","body":"@handlers = {\"head\".upcase => Hash(String, Proc(Request, Response)).new}.merge(@handlers)\n@handlers[\"head\".upcase][path] = handler\n"}},{"id":"options(path:String,&handler:Proc(Request,Response))-instance-method","html_id":"options(path:String,&handler:Proc(Request,Response))-instance-method","name":"options","doc":"Creates handlers for requests with the \"options\" method. Given a path and a block or proc,\nassociates a options request to that path with the given block or proc.\nExample:\n```\nserver.options \"/\" do |req|\n  ...\nend\n```","summary":"<p>Creates handlers for requests with the \"options\" method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, &handler : Proc(Request, Response))","source_link":null,"def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"Proc(Request, Response)"},"return_type":"","visibility":"Public","body":"@handlers = {\"options\".upcase => Hash(String, Proc(Request, Response)).new}.merge(@handlers)\n@handlers[\"options\".upcase][path] = handler\n"}},{"id":"patch(path:String,&handler:Proc(Request,Response))-instance-method","html_id":"patch(path:String,&handler:Proc(Request,Response))-instance-method","name":"patch","doc":"Creates handlers for requests with the \"patch\" method. Given a path and a block or proc,\nassociates a patch request to that path with the given block or proc.\nExample:\n```\nserver.patch \"/\" do |req|\n  ...\nend\n```","summary":"<p>Creates handlers for requests with the \"patch\" method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, &handler : Proc(Request, Response))","source_link":null,"def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"Proc(Request, Response)"},"return_type":"","visibility":"Public","body":"@handlers = {\"patch\".upcase => Hash(String, Proc(Request, Response)).new}.merge(@handlers)\n@handlers[\"patch\".upcase][path] = handler\n"}},{"id":"port:Int32-instance-method","html_id":"port:Int32-instance-method","name":"port","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@port"}},{"id":"post(path:String,&handler:Proc(Request,Response))-instance-method","html_id":"post(path:String,&handler:Proc(Request,Response))-instance-method","name":"post","doc":"Creates handlers for requests with the \"post\" method. Given a path and a block or proc,\nassociates a post request to that path with the given block or proc.\nExample:\n```\nserver.post \"/\" do |req|\n  ...\nend\n```","summary":"<p>Creates handlers for requests with the \"post\" method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, &handler : Proc(Request, Response))","source_link":null,"def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"Proc(Request, Response)"},"return_type":"","visibility":"Public","body":"@handlers = {\"post\".upcase => Hash(String, Proc(Request, Response)).new}.merge(@handlers)\n@handlers[\"post\".upcase][path] = handler\n"}},{"id":"put(path:String,&handler:Proc(Request,Response))-instance-method","html_id":"put(path:String,&handler:Proc(Request,Response))-instance-method","name":"put","doc":"Creates handlers for requests with the \"put\" method. Given a path and a block or proc,\nassociates a put request to that path with the given block or proc.\nExample:\n```\nserver.put \"/\" do |req|\n  ...\nend\n```","summary":"<p>Creates handlers for requests with the \"put\" method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, &handler : Proc(Request, Response))","source_link":null,"def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"Proc(Request, Response)"},"return_type":"","visibility":"Public","body":"@handlers = {\"put\".upcase => Hash(String, Proc(Request, Response)).new}.merge(@handlers)\n@handlers[\"put\".upcase][path] = handler\n"}},{"id":"set_parser(content_type:String,parser:BodyParser)-instance-method","html_id":"set_parser(content_type:String,parser:BodyParser)-instance-method","name":"set_parser","doc":"Adds a custom parser to the server. Takes as input the MIME type this parser is meant to parse, and a subclass\nof `BodyParser`, implementing `self.parse`. This can be used to overwrite old parsers.\nExample:\n```\nserver.set_parser \"application/gzip\", MyGzipParser\n```","summary":"<p>Adds a custom parser to the server.</p>","abstract":false,"args":[{"name":"content_type","doc":null,"default_value":"","external_name":"content_type","restriction":"String"},{"name":"parser","doc":null,"default_value":"","external_name":"parser","restriction":"BodyParser"}],"args_string":"(content_type : String, parser : BodyParser)","source_link":null,"def":{"name":"set_parser","args":[{"name":"content_type","doc":null,"default_value":"","external_name":"content_type","restriction":"String"},{"name":"parser","doc":null,"default_value":"","external_name":"parser","restriction":"BodyParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parsers[content_type] = parse"}},{"id":"start-instance-method","html_id":"start-instance-method","name":"start","doc":"Starts the server. Takes no parameters.\nExample:\n```\nserver.start\n```","summary":"<p>Starts the server.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"start","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"server = TCPServer.new(\"0.0.0.0\", @port)\nputs(\"\\e[0;33mListening on \\e[0;32m0.0.0.0:\\e[0;34m#{@port}\\e[0;0m...\")\nspawn do\n  loop do\n    if (val = @pending.receive?) == nil\n    else\n      client, req = val.as(Tuple(TCPSocket, Request))\n      puts(\"\\e[0;33m#{req.method} \\e[0;34m#{req.path}\")\n      if !(@handlers.fetch(req.method, false))\n        res = Response.new(\"\", Status::NotAllowed)\n      else\n        if !(@handlers[req.method].fetch(req.path, false))\n          res = Response.new(\"\", Status::NotFound)\n        else\n          res = @handlers[req.method][req.path].call(req)\n        end\n      end\n      client.puts(res.to_s)\n      if res.status.value >= 400\n        puts(\"↳\\e[0;31m#{res.status.value} \\e[0;34m#{MESSAGES[res.status]}\")\n      else\n        if res.status.value >= 200\n          puts(\"↳\\e[0;32m#{res.status.value} \\e[0;34m#{MESSAGES[res.status]}\")\n        else\n          puts(\"↳\\e[0;33m#{res.status.value} \\e[0;34m#{MESSAGES[res.status]}\")\n        end\n      end\n      client.close\n    end\n  end\nend\nloop do\n  client = server.accept?.as(TCPSocket)\n  data = \"\"\n  while (line = client.read_line) != \"\"\n    data = data + (line + \"\\n\")\n  end\n  req = Request.from(data)\n  if req.is_a?(Status)\n    req = req.as(Status)\n    client.puts(\"HTTP/1.0 #{req} #{MESSAGES[req]}\")\n    client.puts(\"#{req} #{MESSAGES[req]}\")\n    client.close\n  else\n    data2 = \"\"\n    if (/^multipart\\/form-data; *boundary *= *.*$/) =~ (req.headers.fetch(\"Content-Type\", \"\"))\n      boundary = ((/^multipart\\/form-data; *boundary *= *(.*)$/).match(req.headers[\"Content-Type\"])).try(&.[](1))\n      while (line = client.read_line) != \"--#{boundary}--\"\n        data2 = data2 + (line + \"\\n\")\n      end\n    else\n      data2 = Bytes.new((req.headers.fetch(\"Content-Length\", \"0\")).to_i)\n      client.read(data2)\n      data2 = String.new(data2)\n    end\n    req = Request.from(data + data2)\n    if req.is_a?(Status)\n      req = req.as(Status)\n      client.puts(\"HTTP/1.0 #{req} #{MESSAGES[req]}\")\n      client.puts(\"#{req} #{MESSAGES[req]}\")\n      client.close\n    else\n      req = req.as(Request)\n      if @parsers[req.headers[\"Content-Type\"]?]? && req.body.is_a?(String)\n        req.body = @parsers[req.headers[\"Content-Type\"]].parse(req.body.as(String))\n      end\n      @pending.send({client, req})\n    end\n  end\nend\n"}},{"id":"state:State-instance-method","html_id":"state:State-instance-method","name":"state","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : State","source_link":null,"def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"State","visibility":"Public","body":"@state"}}],"macros":[],"types":[]},{"html_id":"coral/Coral/URLBodyParser","path":"Coral/URLBodyParser.html","kind":"class","full_name":"Coral::URLBodyParser","name":"URLBodyParser","abstract":false,"superclass":{"html_id":"coral/Coral/BodyParser","kind":"class","full_name":"Coral::BodyParser","name":"BodyParser"},"ancestors":[{"html_id":"coral/Coral/BodyParser","kind":"class","full_name":"Coral::BodyParser","name":"BodyParser"},{"html_id":"coral/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"coral/Coral","kind":"module","full_name":"Coral","name":"Coral"},"doc":"Body parser for URL encoded requests. Splits each request on the characters \"&\" and \"=\" to generate a \n`Hash(String, String)` representing passed URL parameters.\n\nTODO: add support for array URL parameters, for example: a[]=1&a[]=2. Ideally these could be represented as arrays\nof strings.","summary":"<p>Body parser for URL encoded requests.</p>","class_methods":[{"id":"parse(body:String)-class-method","html_id":"parse(body:String)-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"args_string":"(body : String)","source_link":null,"def":{"name":"parse","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"body = body.split('&')\nm = URLMap.new\nbody.each do |pair|\n  k, v = pair.split('=')\n  m[k] = (v.split('\\u{0}'))[0]\nend\nm\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"coral/Status","path":"Status.html","kind":"enum","full_name":"Status","name":"Status","abstract":false,"superclass":null,"ancestors":[{"html_id":"coral/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"coral/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"coral/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"coral/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"coral","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Ok","name":"Ok","value":"200","doc":null,"summary":null},{"id":"BadRequest","name":"BadRequest","value":"400","doc":null,"summary":null},{"id":"NotFound","name":"NotFound","value":"404","doc":null,"summary":null},{"id":"NotAllowed","name":"NotAllowed","value":"405","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Enum representing an HTTP status code. *Very* incomplete, using only the most common codes.","summary":"<p>Enum representing an HTTP status code.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"bad_request?-instance-method","html_id":"bad_request?-instance-method","name":"bad_request?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"bad_request?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == BadRequest"}},{"id":"not_allowed?-instance-method","html_id":"not_allowed?-instance-method","name":"not_allowed?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"not_allowed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NotAllowed"}},{"id":"not_found?-instance-method","html_id":"not_found?-instance-method","name":"not_found?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"not_found?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NotFound"}},{"id":"ok?-instance-method","html_id":"ok?-instance-method","name":"ok?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"ok?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Ok"}}],"macros":[],"types":[]}]}})